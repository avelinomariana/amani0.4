class QuizManager {
    constructor(apiEndpoint) {
        this.apiEndpoint = apiEndpoint; // URL do Back-End para diagnóstico
        this.currentStep = 1;
        this.respostas = {}; // Objeto que guarda as escolhas do cliente
    }

    // Função para avançar/guardar a resposta (chamada ao clicar no botão "Próximo")
    guardarResposta(questaoId, valorResposta) {
        // Guarda o dado (Ex: "Problema_Alvo": "Ressecamento Severo")
        this.respostas[questaoId] = valorResposta; 
        
        // Lógica de avanço...
        this.currentStep++;
        this.renderizarProximoPasso();
    }

    // PONTO CRÍTICO: Envio de Dados para o Back-End
    async finalizarQuiz() {
        console.log("Enviando dados para o Back-End...", this.respostas);

        try {
            const response = await fetch(this.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                // O corpo da requisição contém as respostas do cliente
                body: JSON.stringify(this.respostas) 
            });

            if (!response.ok) {
                throw new Error(`Erro de rede ou Back-End. Status: ${response.status}`);
            }

            // O Front-End recebe o 'diagnóstico_detalhado' e o 'produto_recomendado'
            const resultadoDiagnostico = await response.json(); 
            
            // Chama a função para renderizar o componente ResultPage.js
            this.renderizarResultado(resultadoDiagnostico);

        } catch (error) {
            console.error("Falha no processo de Quiz:", error);
            // Lógica de fallback
        }
    }

    // Funções de UI (seriam implementadas pelo seu Desenvolvedor Front-End)
    renderizarProximoPasso() {
        // Código para atualizar a UI para a próxima pergunta
    }
    
    renderizarResultado(dados) {
        // Código para renderizar o Diagnóstico Detalhado
    }
}